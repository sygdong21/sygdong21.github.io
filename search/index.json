[{"content":"Hugo框架搭建blog 参考资料\n博客 视频\nHugo环境\nHugo下载地址 Hugo主题下载\n本地部署 下载解压Hugo cmd命令创建dev文件夹 1 hugo new site dev 将hugo.exe文件复制到dev文件夹\n添加Hugo主题 下载主题 hugo-theme-stack-master\n重命名 hugo-theme-stack 放进dev-themes文件夹\n复制主题中示例网站exampleSite文件夹中的content文件夹和hugo.yaml文件 放到dev最外层\n路径 dev\\themes\\hugo-theme-stack\\exampleSite\n1 2 3 删除与hugo.yaml冲突的hugo.toml配置文件 编辑hugo.yaml修改主题 1 theme: hugo-theme-stack 本地部署运行 1 cmd启动服务 hugo server -D 1 访问地址 http://localhost:1313/ GithubPage部署 创建github.io项目 创建项目blgocode分支\n其中blgocode分支放hugo框架源码\nmaster分支放自动部署后生成的代码\n克隆项目到本地，切换到blgocode分支 将dev里的源码添加到本地\n修改hugo.yaml 的baseurl改为你的github.io地址\n1 baseurl: https://sygdong21.github.io/ 提交到远程blgocode分支\nGithub Action实现自动化部署 在github网站开发者设置中创建token用于自动化部署\n在github.io库中设置Repository secrets变量 将token的值写进去\n在blogcode分支创建.github\\workflows\\hugo_deploy.yaml 配置文件实现自动化部署\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # 代码提交到远程blogcode分支时触发github action # gitbub action自动部署发布到master分支 # 所以源码在blogcode分支 public代码在master分支 name: deploy on: push: branches: - blogcode paths: - \u0026#34;content/**\u0026#34; - \u0026#34;hugo.yaml\u0026#34; - \u0026#34;themes/**\u0026#34; - \u0026#34;.github/workflows/hugo_deploy.yaml\u0026#34; jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.TOKEN }} EXTERNAL_REPOSITORY: sygdong21/sygdong21.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: auto deploy 提交到分支触发Github Action自动部署\n访问地址\n1 https://yourGithubUsername.github.io/ ","date":"2025-01-01T00:00:00Z","image":"https://sygdong21.github.io/p/%E6%90%AD%E5%BB%BAhugodemo/hugodemo-01_hu_6ccdc2de1a2dab6f.jpg","permalink":"https://sygdong21.github.io/p/%E6%90%AD%E5%BB%BAhugodemo/","title":"搭建HugoDemo"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://sygdong21.github.io/p/syg-test/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://sygdong21.github.io/p/syg-test/","title":"syg test"}]